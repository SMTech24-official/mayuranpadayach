generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  fullName          String        @default("")
  email             String        @unique
  fcmToken     String?    @default("")
  profileImage      String?       @default("")
  phoneNumber       String?       @default("")
  address           String?       @default("")
  expirationOtp     DateTime?     
  otp               Int? 
  password          String
  isApproved        Boolean       @default(false)
  role              UserRole      @default(USER)
  status            UserStatus    @default(ACTIVE)
  isAllowed       Boolean       @default(false)
  subscriptionEndsAt     DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  businesses        Business[]    @relation("UserBusinesses")
  favorites         Favorite[]    @relation("UserFavorites")
  favoriteSpecialists FavoriteSpecialist[] @relation("UserFavoriteSpecialists")
  bookings          Booking[]     @relation("UserBookings")
  reviews           Review[]      @relation("UserReviews")
  subscriptionOffer   UserSubscription[] @relation("UserRelation")
  adminSubscription   SubscriptionOffer[] @relation("UserRelation")
  notifications     Notification[] @relation("UserRelation")
  @@map("users")
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  image String?    @default("")
  isDeleted Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subCategories SubCategory[] @relation("CategorySubCategories")
  businesses    Business[]    @relation("CategoryBusinesses")
  @@map("categories")
}

model SubCategory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @default("")
  categoryId  String   @db.ObjectId
  isDeleted Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category    Category @relation("CategorySubCategories",fields: [categoryId], references: [id])
  businesses  Business[] @relation("SubCategoryBusinesses")
  @@map("subcategories")
}

model Business {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @default("")
  about       String? @default("")
  contactNumber String? @default("")
  image       String? @default("")
  categoryId  String   @db.ObjectId
  subCategoryId String @db.ObjectId
  latitude   Float? @default(0)
  longitude  Float? @default(0)
  address     String? @default("")
  openingHours String
  closingHours String
  status       BusinessStatus @default(ACTIVE)
  openStatus  BusinessTimeStatus @default(OPEN)
  userId      String   @db.ObjectId
  isDeleted Boolean @default(false)
  overallRating Int @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category    Category @relation("CategoryBusinesses",fields: [categoryId], references: [id])
  subCategory SubCategory @relation("SubCategoryBusinesses",fields: [subCategoryId], references: [id])
  user        User      @relation("UserBusinesses",fields: [userId], references: [id])
  services    Service[] @relation("BusinessServices")
  specialists Specialist[] @relation("BusinessSpecialists")
  bookings    Booking[] @relation("BusinessBookings")
  portfolios  Portfolio[] @relation("BusinessPortfolios")
  @@map("businesses")
}

model Service {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?  @default("")
  price       Float
  image       String @default("")
  isActive    Boolean  @default(true)
  isOffered   Boolean  @default(false)
  offeredPercent Int? @default(0)
  businessId  String   @db.ObjectId
  isDeleted Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  business    Business @relation("BusinessServices",fields: [businessId], references: [id])
  favorites   Favorite[] @relation("ServiceFavorites")
  specialists Specialist[] @relation("ServiceSpecialists")
  bookings    Booking[] @relation("ServiceBookings")
  @@map("services")
}

model Specialist {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  businessId  String   @db.ObjectId
  serviceId   String  @db.ObjectId
  fullName    String  @default("")
  phoneNumber String?  @default("")
  profileImage String? @default("")
  specialization String @default("")
  status      UserStatus @default(ACTIVE)
  experience Int? @default(0)
  totalRating Int? @default(0)
  totalWorks Int? @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  business    Business @relation("BusinessSpecialists",fields: [businessId], references: [id])
  service     Service @relation("ServiceSpecialists",fields: [serviceId], references: [id])
  bookings    Booking[] @relation("SpecialistBookings")
  reviews     Review[] @relation("SpecialistReviews")
  favorites   FavoriteSpecialist[] @relation("ServiceFavoriteSpecialists")
  portfolios  Portfolio[] @relation("SpecialistPortfolios")
  @@map("specialists")
}

model Portfolio{
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  specialistId String  @db.ObjectId
  image       String   @default("")
  businessId  String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  specialist Specialist @relation("SpecialistPortfolios",fields: [specialistId], references: [id])
  business    Business @relation("BusinessPortfolios",fields: [businessId], references: [id])
  @@map("portfolios")
}
model Favorite {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  serviceId  String  @db.ObjectId
  isFavorite  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation("UserFavorites",fields: [userId], references: [id])
  service     Service  @relation("ServiceFavorites",fields: [serviceId], references: [id])
  @@map("favorites")
}

model FavoriteSpecialist {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  specialistId  String  @db.ObjectId
  isFavorite  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation("UserFavoriteSpecialists",fields: [userId], references: [id])
  specialist  Specialist  @relation("ServiceFavoriteSpecialists",fields: [specialistId], references: [id])
  @@map("favoriteSpecialists")
}


model Booking {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  businessId  String   @db.ObjectId
  serviceId   String   @db.ObjectId
  specialistId String @db.ObjectId
  bookingDate DateTime
  timeSlot    TimeSlot[] @relation("BookingTimeSlots")
  totalPrice Float
  paymentStatus Boolean @default(false)
  status      UserStatus @default(ACTIVE)
  bookingStatus bookingStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation("UserBookings",fields: [userId], references: [id])
  business    Business @relation("BusinessBookings",fields: [businessId], references: [id])
  service     Service  @relation("ServiceBookings",fields: [serviceId], references: [id])
  specialist Specialist @relation("SpecialistBookings",fields: [specialistId], references: [id])
  @@map("bookings")
}

model TimeSlot {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  bookingId   String  @db.ObjectId
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  booking     Booking? @relation("BookingTimeSlots",fields: [bookingId], references: [id])
  @@unique([startTime, endTime])
  
  @@map("timeslots")
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  specialistId String @db.ObjectId
  rating      Int
  comment     String? @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation("UserReviews",fields: [userId], references: [id])
  specialist Specialist? @relation("SpecialistReviews",fields: [specialistId], references: [id])
  
  @@map("reviews")
}

model SubscriptionOffer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  price       Float   
  duration    Int
  platformFee    Float
  features       Json   // for storing feature flags as key-value
  status      UserStatus @default(ACTIVE)
  createdBy   String   @db.ObjectId
  creator     User     @relation("UserRelation",fields: [createdBy], references: [id])
  isDeleted           Boolean        @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  UserSubscription UserSubscription[]
  
  @@map("subscription_offers")

}

model UserSubscription {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  userId              String             @db.ObjectId
  subscriptionOfferId String             @db.ObjectId
  startDate           DateTime           @default(now())
  endDate             DateTime           @default(now())
  paymentId           String            @default("")
  paymentStatus       PaymentStatus      @default(PENDING)
  status              SubscriptionStatus @default(PENDING)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  user                User               @relation("UserRelation", fields: [userId], references: [id])
  subscriptionOffer   SubscriptionOffer  @relation(fields: [subscriptionOfferId], references: [id])

  @@map("user_subscriptions")
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  title     String
  body      String
  data      String? @default("")
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserRelation",fields: [userId], references: [id])

  @@map("notifications")
}
enum UserRole {
  ADMIN
  PROFESSIONAL
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum BusinessStatus {
  PENDING
  ACTIVE
  SUSPENDED
}
enum BusinessTimeStatus {
  OPEN
  CLOSED
}
enum bookingStatus {
  PENDING
  COMPLETE_REQUEST
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REQUIRES_CAPTURE
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  EXPIRED
}